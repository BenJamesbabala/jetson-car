// Generated by gencpp from file rc_car_msgs/CarRecorder.msg
// DO NOT EDIT!


#ifndef RC_CAR_MSGS_MESSAGE_CARRECORDER_H
#define RC_CAR_MSGS_MESSAGE_CARRECORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rc_car_msgs
{
template <class ContainerAllocator>
struct CarRecorder_
{
  typedef CarRecorder_<ContainerAllocator> Type;

  CarRecorder_()
    : img_path()
    , steer(0.0)
    , throttle(0.0)
    , velocity(0.0)  {
    }
  CarRecorder_(const ContainerAllocator& _alloc)
    : img_path(_alloc)
    , steer(0.0)
    , throttle(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _img_path_type;
  _img_path_type img_path;

   typedef float _steer_type;
  _steer_type steer;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _velocity_type;
  _velocity_type velocity;




  typedef boost::shared_ptr< ::rc_car_msgs::CarRecorder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rc_car_msgs::CarRecorder_<ContainerAllocator> const> ConstPtr;

}; // struct CarRecorder_

typedef ::rc_car_msgs::CarRecorder_<std::allocator<void> > CarRecorder;

typedef boost::shared_ptr< ::rc_car_msgs::CarRecorder > CarRecorderPtr;
typedef boost::shared_ptr< ::rc_car_msgs::CarRecorder const> CarRecorderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rc_car_msgs::CarRecorder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rc_car_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rc_car_msgs': ['/home/nvidia/jetson-car/src/rc_car_msgs/msg', '/home/nvidia/jetson-car/src/rc_car_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rc_car_msgs::CarRecorder_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rc_car_msgs::CarRecorder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rc_car_msgs::CarRecorder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ff232c3ef1ac97d91355af7dc5015af";
  }

  static const char* value(const ::rc_car_msgs::CarRecorder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ff232c3ef1ac97dULL;
  static const uint64_t static_value2 = 0x91355af7dc5015afULL;
};

template<class ContainerAllocator>
struct DataType< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rc_car_msgs/CarRecorder";
  }

  static const char* value(const ::rc_car_msgs::CarRecorder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string   img_path\n\
float32  steer\n\
float32  throttle\n\
float32  velocity\n\
";
  }

  static const char* value(const ::rc_car_msgs::CarRecorder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.img_path);
      stream.next(m.steer);
      stream.next(m.throttle);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarRecorder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rc_car_msgs::CarRecorder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rc_car_msgs::CarRecorder_<ContainerAllocator>& v)
  {
    s << indent << "img_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.img_path);
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RC_CAR_MSGS_MESSAGE_CARRECORDER_H
